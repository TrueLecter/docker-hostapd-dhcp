Index: wpa-2.7+git20190128+0c1e29f/hostapd/config_file.c
===================================================================
--- wpa-2.7+git20190128+0c1e29f.orig/hostapd/config_file.c
+++ wpa-2.7+git20190128+0c1e29f/hostapd/config_file.c
@@ -2824,6 +2824,8 @@ static int hostapd_config_fill(struct ho
 		bss->wpa_gmk_rekey = atoi(pos);
 	} else if (os_strcmp(buf, "wpa_ptk_rekey") == 0) {
 		bss->wpa_ptk_rekey = atoi(pos);
+	} else if (os_strcmp(buf, "noscan") == 0) {
+		conf->noscan = atoi(pos);
 	} else if (os_strcmp(buf, "wpa_group_update_count") == 0) {
 		char *endp;
 		unsigned long val = strtoul(pos, &endp, 0);
@@ -3357,6 +3359,8 @@ static int hostapd_config_fill(struct ho
 #ifdef CONFIG_IEEE80211N
 	} else if (os_strcmp(buf, "ieee80211n") == 0) {
 		conf->ieee80211n = atoi(pos);
+	} else if (os_strcmp(buf, "noscan") == 0) {
+		conf->noscan = atoi(pos);
 	} else if (os_strcmp(buf, "ht_capab") == 0) {
 		if (hostapd_config_ht_capab(conf, pos) < 0) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid ht_capab",
Index: wpa-2.7+git20190128+0c1e29f/src/ap/ap_config.h
===================================================================
--- wpa-2.7+git20190128+0c1e29f.orig/src/ap/ap_config.h
+++ wpa-2.7+git20190128+0c1e29f/src/ap/ap_config.h
@@ -796,6 +796,7 @@ struct hostapd_config {
 
 	int ht_op_mode_fixed;
 	u16 ht_capab;
+	int noscan;
 	int ieee80211n;
 	int secondary_channel;
 	int no_pri_sec_switch;
Index: wpa-2.7+git20190128+0c1e29f/src/ap/hw_features.c
===================================================================
--- wpa-2.7+git20190128+0c1e29f.orig/src/ap/hw_features.c
+++ wpa-2.7+git20190128+0c1e29f/src/ap/hw_features.c
@@ -477,7 +477,7 @@ static int ieee80211n_check_40mhz(struct
 	int ret;
 
 	/* Check that HT40 is used and PRI / SEC switch is allowed */
-	if (!iface->conf->secondary_channel || iface->conf->no_pri_sec_switch)
+	if (!iface->conf->secondary_channel || iface->conf->no_pri_sec_switch || iface->conf->noscan)
 		return 0;
 
 	hostapd_set_state(iface, HAPD_IFACE_HT_SCAN);
@@ -730,7 +730,7 @@ static int hostapd_is_usable_chans(struc
 	if (!hostapd_is_usable_chan(iface, iface->conf->channel, 1))
 		return 0;
 
-	if (!iface->conf->secondary_channel)
+	if (!iface->conf->secondary_channel || iface->conf->noscan)
 		return 1;
 
 	if (!iface->conf->ht40_plus_minus_allowed)
Index: wpa-2.7+git20190128+0c1e29f/src/ap/ieee802_11_ht.c
===================================================================
--- wpa-2.7+git20190128+0c1e29f.orig/src/ap/ieee802_11_ht.c
+++ wpa-2.7+git20190128+0c1e29f/src/ap/ieee802_11_ht.c
@@ -252,6 +252,9 @@ void hostapd_2040_coex_action(struct hos
 		return;
 	}
 
+	if (iface->conf->noscan)
+		return;
+
 	if (len < IEEE80211_HDRLEN + 2 + sizeof(*bc_ie)) {
 		wpa_printf(MSG_DEBUG,
 			   "Ignore too short 20/40 BSS Coexistence Management frame");
@@ -412,6 +415,9 @@ void ht40_intolerant_add(struct hostapd_
 	if (iface->current_mode->mode != HOSTAPD_MODE_IEEE80211G)
 		return;
 
+	if (iface->conf->noscan)
+		return;
+
 	wpa_printf(MSG_INFO, "HT: Forty MHz Intolerant is set by STA " MACSTR
 		   " in Association Request", MAC2STR(sta->addr));
 
